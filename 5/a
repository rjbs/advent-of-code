#!/usr/bin/perl
use v5.30.0;
use warnings;

sub parse {
  my ($r_str, $c_str) = $_[0] =~ /\A(.{7})(...)\z/;

  my $row;
  my $col;

  {
    {
      my $row_range = [ 0, 127 ];

      for my $c (split //, $r_str) {
        my $total = $row_range->[1] - $row_range->[0] + 1;
        my $half  = $total / 2;

        if ($c eq 'F') { $row_range->[1] -= $half }
        if ($c eq 'B') { $row_range->[0] += $half }
        say "$c / [@$row_range]";
      }

      die "!@" unless $row_range->[0] == $row_range->[1];
      $row = $row_range->[0];
    }

    {
      my $col_range = [ 0, 7 ];

      for my $c (split //, $c_str) {
        my $total = $col_range->[1] - $col_range->[0] + 1;
        my $half  = $total / 2;

        if ($c eq 'L') { $col_range->[1] -= $half }
        if ($c eq 'R') { $col_range->[0] += $half }
        say "$c / [@$col_range]";
      }

      die "!@" unless $col_range->[0] == $col_range->[1];
      $col = $col_range->[0];
    }
  }

  return { row => $row, column => $col, id => $row * 8 + $col };
}

my %seen;

for my $input (<>) {
  chomp $input;
  my $seat = parse($input);
  printf "row %4i col %4i seat %5i\n", $seat->@{ qw( row column id ) };
  $seen{ $seat->{id} } = 1;
}

for my $id (sort {$a<=>$b} keys %seen) {
  my $next = exists $seen{ $id + 1 } ? 'next' : '';
  my $prev = exists $seen{ $id - 1 } ? 'prev' : '';

  next if $next and $prev;

  printf "%4i: %s missing\n", $id, "$next$prev";
}
